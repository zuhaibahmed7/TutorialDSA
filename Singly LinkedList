public class singleLinkedList {
    private static ListNode head;
    
    public static class ListNode {
        private int data;
        private ListNode next;
        ListNode (int data ){
            this.data = data;
            this.next=null;
        }    
    } 
    
    public static void main(String [] args ){
        singleLinkedList sn = new singleLinkedList();

        sn.head= new ListNode(10);
        ListNode second= new ListNode(9);
        ListNode third = new ListNode(8);
        ListNode fourth= new ListNode(7);
        ListNode fifth = new ListNode(6);

        sn.head.next = second;
        second.next = third;
        third.next = fourth;
        fourth.next = fifth;

        // DeleteFirstListNode();
        // System.out.println(DeleteLastLisNode ().data);     
        // deleteNodeAtSomePoint(1);   

        System.out.println(SearchKey(7));
        
        while(head!=null){
            System.out.println(head.data);
            head = head.next;
            
        }
        
    
    }

    // Delete first node whose data is 10
     static ListNode DeleteFirstListNode(){
        if(head==null){
            return null;
            
        }
        ListNode temp = head;
        head = head.next;
        temp.next = null;
        return temp;
    }
    // Delete last node whose data is 6
    static ListNode DeleteLastLisNode (){
        if(head ==null || head.next == null ){
            return head;
        }
        ListNode previous = null ;
        ListNode current = head;
        while(current.next!= null){
            previous =current;
            current =current.next;
        }

        previous.next= null;
        return current;
    }

    static void deleteNodeAtSomePoint (int position){
        if(position==1){
            head = head.next;
        }
        else {
            int count=1;
            ListNode previous = head;
            ListNode current= null;
            while(count<position-1){
                
                 previous = previous.next;
                count++;
            }
             current = previous.next;
            previous.next= current.next;    
        } 
    }

    static boolean SearchKey(int nodeValue){
        ListNode current = head;
        int count =0;
        while(current!=null){
           if(current.data==nodeValue){
            count++;
            System.out.println(" node found at position "+ count);
               return true;
           }

           count++;
           current = current.next;
        }

        
        return false;
    } 
}
