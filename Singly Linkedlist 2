public class Main {

    public static ListNode head;

    public static class ListNode {

        int data;
        ListNode next;
        public ListNode(int data){
            this.data = data;
            this.next= null;
        }
    }

    public static void main(String [] args ){
        Main rv = new Main();
        rv.head = new ListNode(10);
        ListNode second = new ListNode(9);
        ListNode third = new ListNode(8);
        ListNode fourth = new ListNode(7);
        ListNode fifth = new ListNode(6);
        ListNode sixth = new ListNode(5);

        rv.head.next= second;
        second.next= third;
        third.next= fourth;
        fourth.next= fifth;
        fifth.next= sixth;

        // // Printig the nodes before reversing;
        // System.out.println("Before reversing: ");
         
        //  ListNode temp=head;
        // while (temp!=null){
        //     System.out.print(temp.data+ "->");
        //     temp= temp.next;
        // }
        
        // System.out.println();
        // System.out.println("After reversing: ");

       
        // head = reverseNodes(head);
        // ListNode tem = head;
        // while(tem!=null){
        //     System.out.print(tem.data+ " -> ");
        //     tem = tem.next;
        // }
        // System.out.println();

        // // Fetching the nth node from the end of the linked list;
        System.out.println(nthListNodeFromTheEndOfLinkedList(1).data);
        System.out.println(nthListNodeFromTheStartOfLinkedList(6).data);
    }

    static ListNode reverseNodes(ListNode head){
         
        ListNode current = head;
        ListNode previous = null;
        ListNode next = null;

        while(current!=null){
            next= current.next;
            current.next = previous ;
            previous = current;
            current = next;
        }
        return previous;
    }

    static ListNode nthListNodeFromTheEndOfLinkedList(int n){
        ListNode refPtr = head;
        ListNode mainPtr= head;
        int count=0;
        while(count<n){
            refPtr=refPtr.next;
            count++;
        } 
        while(refPtr!=null){
            refPtr= refPtr.next;
            mainPtr = mainPtr.next;
        }
        return mainPtr;
    }

    static ListNode nthListNodeFromTheStartOfLinkedList(int n){
        ListNode refPtr = head;
        int count =1;
        while(count<n){
            refPtr = refPtr.next;
            count++;
        }
        return refPtr;

    }
    
}
