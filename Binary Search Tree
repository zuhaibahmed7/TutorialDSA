package DSA;

public class BinarSearchTree {
	
	TreeNode root;
	class TreeNode {
		TreeNode left;
		TreeNode right ;  
		int data;
		TreeNode(int data){
			this.data=data;   
		}
	}
	public TreeNode insert(TreeNode root, int value) {
		if(root==null) {
			root= new TreeNode(value);
			return root;
		}
		
		if(value>root.data) {
			root.right=insert(root.right, value);
			
		}
		else {
			root.left=insert(root.left, value);
		}
		return root;
	}
	
	
	public static void main(String [] args ) {
		BinarSearchTree p = new BinarSearchTree();
		
//		System.out.print((p.insert(p.root, 1)).data+" ");   insert(null, 1) → creates: 1 → prints 1
//		System.out.print((p.insert(p.root, 7)).data+" ");   insert(null, 7) → creates: 7 → prints 7
//		System.out.print((p.insert(p.root, 0)).data+" ");   insert(null, 0) → creates: 0 → prints 0
//		System.out.print((p.insert(p.root, 6)).data+" ");   insert(null, 6) → creates: 6 → prints 6
// 		Because p is never initialized that's why each call creates its own one node tree 
		
		
		p.root =p.insert(p.root, 5);
		System.out.print((p.insert(p.root, 1)).data+" ");
		System.out.print((p.insert(p.root, 7)).data+" ");
		System.out.print((p.insert(p.root, 0)).data+" ");
		System.out.print((p.insert(p.root, 6)).data+" ");
		
		System.out.print (p.root.data);
		
	}
}
    

  
