package DSA;
import java.util.Queue;
import java.util.LinkedList;

public class levelOrderUsingQueue {
TreeNode root;
	
	public class TreeNode {
		TreeNode left;
		TreeNode right;
		int data;
		
		TreeNode (int data){
			this.data=data;
			this.right=null;
			this.left=null;
		}
	}
	
	public void creatTreeNode () {
		
		TreeNode first=new TreeNode(1);
		TreeNode second=new TreeNode(2);
		TreeNode third=new TreeNode(3);
		TreeNode fourth=new TreeNode(4);
		TreeNode fifth=new TreeNode(5);
		TreeNode sixth=new TreeNode(6);
		TreeNode seventh=new TreeNode(7);
		TreeNode eigth=new TreeNode(8);
		TreeNode ninth=new TreeNode(1);
		TreeNode tenth=new TreeNode(1);
		
		
		root=first;
		first.left = second;
		first.right =third;
		second.left=fourth;
		second.right=fifth;
		third.right=sixth;
		third.left=seventh;
		fourth.right=eigth;
		fourth.left=ninth;
		fifth.right =tenth;
	}
	public void postOrder(TreeNode root) {
		if(root==null) {
			return;
		}
		
		Queue<TreeNode> queue = new LinkedList();
		queue.offer(root);
		while(!queue.isEmpty()) {
			TreeNode temp=queue.poll();     // can use queue.removeFirst()
			System.out.print(temp.data+ " ");     
			
			if(temp.left!=null) {
				queue.offer(temp.left);
			}
			
			if(temp.right!=null) {
				queue.offer(temp.right);       // can use add() or addLast()
			}
		}
	}
	

	  public static void main(String  [] args ) {
		  
		  levelOrderUsingQueue p = new levelOrderUsingQueue();
		  p.creatTreeNode();
		  p.postOrder(p.root);
		  
	  }
	
	
}
