package DSA;
import java.util.Stack;


public class PostOrderTracersal {
	TreeNode root;
	
	public class TreeNode {
		TreeNode left;
		TreeNode right;
		int data;
		
		TreeNode (int data){
			this.data=data;
			this.right=null;
			this.left=null;
		}
	}
	
	public void creatTreeNode () {
		
		TreeNode first=new TreeNode(1);
		TreeNode second=new TreeNode(2);
		TreeNode third=new TreeNode(3);
		TreeNode fourth=new TreeNode(4);
		TreeNode fifth=new TreeNode(5);
		TreeNode sixth=new TreeNode(6);
		TreeNode seventh=new TreeNode(7);
		TreeNode eigth=new TreeNode(8);
		TreeNode ninth=new TreeNode(9);
		TreeNode tenth=new TreeNode(10);
		
		
		root=first;
		first.left = second;
		first.right =third;
		second.left=fourth;
		second.right=fifth;
		third.right=sixth;
		third.left=seventh;
		fourth.right=eigth;
		fourth.left=ninth;
		fifth.right =tenth;
	}
	
	public void postOrder(TreeNode root) {
		Stack<TreeNode> stack = new Stack <>();
		if(root==null) {
			return ;
		}
		TreeNode temp= root;
		while(temp!=null || !stack.isEmpty()) {
			if(temp!=null) {
			stack.push(temp);
			temp = temp.left;
			}
			else { 
				
		TreeNode current= stack.peek().right;
		if(current==null) {
			current=stack.pop();
			System.out.print(current.data+" ");
			while(!stack.isEmpty() && current==stack.peek().right) {
				current=stack.pop();
				System.out.print(current.data + " ");
			}
		}
		else {
			temp=current;
	    	}
    	}
    }	
}
	public static void main(String [] args ) {
		PostOrderTracersal p = new PostOrderTracersal();
		p.creatTreeNode();
		p.postOrder(p.root);
	}
}
