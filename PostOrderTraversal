package DSA;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
public class PostOrderTraversal {
	TreeNode root;
	
	public class TreeNode {
		TreeNode left;
		TreeNode right;
		int data;
		
		TreeNode (int data){
			this.data=data;
			this.right=null;
			this.left=null;
		}
	}
	
	public void creatTreeNode () {
		
		TreeNode first=new TreeNode(1);
		TreeNode second=new TreeNode(2);
		TreeNode third=new TreeNode(3);
		TreeNode fourth=new TreeNode(4);
		TreeNode fifth=new TreeNode(5);
		TreeNode sixth=new TreeNode(6);
		TreeNode seventh=new TreeNode(7);
		TreeNode eigth=new TreeNode(8);
		TreeNode ninth=new TreeNode(1);
		TreeNode tenth=new TreeNode(1);
		
		
		root=first;
		first.left = second;
		first.right =third;
		second.left=fourth;
		second.right=fifth;
		third.right=sixth;
		third.left=seventh;
		fourth.right=eigth;
		fourth.left=ninth;
		fifth.right =tenth;
	}

	public List<Integer> postOrder(TreeNode root) {
		List <Integer> result= new ArrayList<>();
		if(root==null) {
			return result;
		}
		
		Stack <TreeNode> stack1= new Stack<>();
		Stack <TreeNode> stack2 = new Stack <>();
		
		stack1.push(root);
		
		while(!stack1.isEmpty()) {
			TreeNode temp= stack1.pop();
			stack2.push(temp);
			
			if(temp.left!=null) {
				stack1.push(temp.left);
			}
			if(temp.right!=null) {
				stack1.push(temp.right);
			}
			
		}
		
		while(! stack2.isEmpty()) {
			result.add(stack2.pop().data);
		}
		
		return result;
	}
	
	
	
	
	public static void main(String [] args ) {
		PostOrderTraversal p = new PostOrderTraversal();
		p.creatTreeNode();
		System.out.println(p.postOrder(p.root));
		
		
	}
}
